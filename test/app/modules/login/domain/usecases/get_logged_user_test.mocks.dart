// Mocks generated by Mockito 5.0.17 from annotations
// in friends_secrets/test/app/modules/login/domain/usecases/get_logged_user_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:friends_secrets/app/modules/login/domain/entities/logged_user_info.dart'
    as _i7;
import 'package:friends_secrets/app/modules/login/domain/errors/errors.dart'
    as _i6;
import 'package:friends_secrets/app/modules/login/infra/datasource/login_data_source.dart'
    as _i2;
import 'package:friends_secrets/app/modules/login/infra/repositories/login_repository.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLoginDataSource_0 extends _i1.Fake implements _i2.LoginDataSource {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [LoginRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepositoryImpl extends _i1.Mock
    implements _i4.LoginRepositoryImpl {
  MockLoginRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LoginDataSource get dataSource =>
      (super.noSuchMethod(Invocation.getter(#dataSource),
          returnValue: _FakeLoginDataSource_0()) as _i2.LoginDataSource);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.LoggedUserInfo>> loggedUser() =>
      (super.noSuchMethod(Invocation.method(#loggedUser, []),
              returnValue:
                  Future<_i3.Either<_i6.Failure, _i7.LoggedUserInfo>>.value(
                      _FakeEither_1<_i6.Failure, _i7.LoggedUserInfo>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.LoggedUserInfo>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> logout() =>
      (super.noSuchMethod(Invocation.method(#logout, []),
              returnValue: Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
                  _FakeEither_1<_i6.Failure, _i3.Unit>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.LoggedUserInfo>> login() =>
      (super.noSuchMethod(Invocation.method(#login, []),
              returnValue:
                  Future<_i3.Either<_i6.Failure, _i7.LoggedUserInfo>>.value(
                      _FakeEither_1<_i6.Failure, _i7.LoggedUserInfo>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.LoggedUserInfo>>);
}

/// A class which mocks [LoginRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class LoginRepositoryMock extends _i1.Mock implements _i4.LoginRepositoryImpl {
  @override
  _i2.LoginDataSource get dataSource =>
      (super.noSuchMethod(Invocation.getter(#dataSource),
          returnValue: _FakeLoginDataSource_0()) as _i2.LoginDataSource);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.LoggedUserInfo>> loggedUser() =>
      (super.noSuchMethod(Invocation.method(#loggedUser, []),
              returnValue:
                  Future<_i3.Either<_i6.Failure, _i7.LoggedUserInfo>>.value(
                      _FakeEither_1<_i6.Failure, _i7.LoggedUserInfo>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.LoggedUserInfo>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> logout() =>
      (super.noSuchMethod(Invocation.method(#logout, []),
              returnValue: Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
                  _FakeEither_1<_i6.Failure, _i3.Unit>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.LoggedUserInfo>> login() =>
      (super.noSuchMethod(Invocation.method(#login, []),
              returnValue:
                  Future<_i3.Either<_i6.Failure, _i7.LoggedUserInfo>>.value(
                      _FakeEither_1<_i6.Failure, _i7.LoggedUserInfo>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.LoggedUserInfo>>);
}
