// Mocks generated by Mockito 5.0.17 from annotations
// in friends_secrets/test/app/modules/login/domain/usecases/logount_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:friends_secrets/app/modules/login/domain/entities/logged_user_info.dart'
    as _i6;
import 'package:friends_secrets/app/modules/login/domain/errors/errors.dart'
    as _i5;
import 'package:friends_secrets/app/modules/login/domain/repositories/login_repository.dart'
    as _i3;
import 'package:google_sign_in/google_sign_in.dart' as _i7;
import 'package:google_sign_in_platform_interface/google_sign_in_platform_interface.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [LoginRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepository extends _i1.Mock implements _i3.LoginRepository {
  MockLoginRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.LoggedUserInfo>> login() =>
      (super.noSuchMethod(Invocation.method(#login, []),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i6.LoggedUserInfo>>.value(
                      _FakeEither_0<_i5.Failure, _i6.LoggedUserInfo>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.LoggedUserInfo>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.LoggedUserInfo>> loggedUser() =>
      (super.noSuchMethod(Invocation.method(#loggedUser, []),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i6.LoggedUserInfo>>.value(
                      _FakeEither_0<_i5.Failure, _i6.LoggedUserInfo>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.LoggedUserInfo>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> logout() =>
      (super.noSuchMethod(Invocation.method(#logout, []),
              returnValue: Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                  _FakeEither_0<_i5.Failure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}

/// A class which mocks [LoginRepository].
///
/// See the documentation for Mockito's code generation for more information.
class LoginRepositoryMock extends _i1.Mock implements _i3.LoginRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.LoggedUserInfo>> login() =>
      (super.noSuchMethod(Invocation.method(#login, []),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i6.LoggedUserInfo>>.value(
                      _FakeEither_0<_i5.Failure, _i6.LoggedUserInfo>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.LoggedUserInfo>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.LoggedUserInfo>> loggedUser() =>
      (super.noSuchMethod(Invocation.method(#loggedUser, []),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i6.LoggedUserInfo>>.value(
                      _FakeEither_0<_i5.Failure, _i6.LoggedUserInfo>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.LoggedUserInfo>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> logout() =>
      (super.noSuchMethod(Invocation.method(#logout, []),
              returnValue: Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                  _FakeEither_0<_i5.Failure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}

/// A class which mocks [GoogleSignIn].
///
/// See the documentation for Mockito's code generation for more information.
class GoogleSignInMock extends _i1.Mock implements _i7.GoogleSignIn {
  @override
  _i8.SignInOption get signInOption =>
      (super.noSuchMethod(Invocation.getter(#signInOption),
          returnValue: _i8.SignInOption.standard) as _i8.SignInOption);
  @override
  List<String> get scopes =>
      (super.noSuchMethod(Invocation.getter(#scopes), returnValue: <String>[])
          as List<String>);
  @override
  _i4.Stream<_i7.GoogleSignInAccount?> get onCurrentUserChanged =>
      (super.noSuchMethod(Invocation.getter(#onCurrentUserChanged),
              returnValue: Stream<_i7.GoogleSignInAccount?>.empty())
          as _i4.Stream<_i7.GoogleSignInAccount?>);
  @override
  _i4.Future<_i7.GoogleSignInAccount?> signInSilently(
          {bool? suppressErrors = true, bool? reAuthenticate = false}) =>
      (super.noSuchMethod(
              Invocation.method(#signInSilently, [], {
                #suppressErrors: suppressErrors,
                #reAuthenticate: reAuthenticate
              }),
              returnValue: Future<_i7.GoogleSignInAccount?>.value())
          as _i4.Future<_i7.GoogleSignInAccount?>);
  @override
  _i4.Future<bool> isSignedIn() =>
      (super.noSuchMethod(Invocation.method(#isSignedIn, []),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<_i7.GoogleSignInAccount?> signIn() =>
      (super.noSuchMethod(Invocation.method(#signIn, []),
              returnValue: Future<_i7.GoogleSignInAccount?>.value())
          as _i4.Future<_i7.GoogleSignInAccount?>);
  @override
  _i4.Future<_i7.GoogleSignInAccount?> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
              returnValue: Future<_i7.GoogleSignInAccount?>.value())
          as _i4.Future<_i7.GoogleSignInAccount?>);
  @override
  _i4.Future<_i7.GoogleSignInAccount?> disconnect() =>
      (super.noSuchMethod(Invocation.method(#disconnect, []),
              returnValue: Future<_i7.GoogleSignInAccount?>.value())
          as _i4.Future<_i7.GoogleSignInAccount?>);
  @override
  _i4.Future<bool> requestScopes(List<String>? scopes) =>
      (super.noSuchMethod(Invocation.method(#requestScopes, [scopes]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}
